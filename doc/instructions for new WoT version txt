
******************************************************
** INSTRUCTIONS FOR UPDATEING THE WoT BATTLE PARSER **
** Created by: BadButton / http://wotnumbers.com    **
******************************************************

This is a procedure explaining how to update the WoT battle parser when WoT new version is released
It requires a Windows PC, procedure is tested on Windows 10
Python 2.7 with uncompyle6 must be installed
This project is made using Visual Studio Code, this instruction takes for granted that you are using VS Code editor
Beyond Compare is reccomeeded for comparing files (https://www.scootersoftware.com/download.php)

The following files are the main files in use that needs most attention:
	wotbr2j.py = WoT Battle Result To Json, custom Python script for unpacking the battle file produced by WoT game client after each battle
	dictpackers.py = methods for unpacking data, extracted from WoT installation files
	battle_results_common.py = data structure, extracted from WoT installation files 
	all other files referenced in this instructions must also be included, but needs no spedific attention

PREPARATIONS - Create a new folder for new battle parser version

	Make sure you have updated WoT to the latest version, locate your game folder and go so subfolder ~\res_mods
	You will find one or several folders with numeric names, ex: "1.10.1.3", the highest number is the latest version

	Navigate to the folder: \versions located in this project
	Create new folder with name: 'WoT_X.X.X.X' that represent the WoT new game client version, ex: 'WoT_1.10.1.3'
	This should also be used as the battle parser new version
	
	Copy the parser from the previous version into the new version, this file can normally be reused with just minor modifications.
	The parser had the filename: 
		
		wotbr2j.py

	Open the file and update version number in line 15, set same version number as the new WoT version

STEP 1 - Exctract source files from WoT game client

	Go to folder:        <your WoT install folder>\res\packages - ex: C:\Games\World_of_Tanks\res\packages
	Open using 7zip:     scripts.pkg
	Browse to folder:    scripts
	Select the folder:   common 
	Create temp folder:  create a temporary folder for extracting files to - ex: C:\Dev\WoT_Files_Raw\<wot_version_number>
	Extract files:		 extract files to the newly created temp folder

STEP 2 - Uncompile extracted source files

	Make sure you have uncompyle6 installed in your Python environment (https://pypi.org/project/uncompyle6/)
	Open Command Prompt at the location of the extracted files - ex: C:\Dev\WoT_Files_Raw\<wot_version_number>\common
	Run Python decompiler on the following files, just copy the following section paste into the command prompt window:

	uncompyle6 -o .\_DECOMPILED\DictPackers.py .\DictPackers.pyc
	uncompyle6 -o .\_DECOMPILED\battle_results_constants.py .\battle_results\battle_results_constants.pyc
	uncompyle6 -o .\_DECOMPILED\battle_results_common.py .\battle_results\battle_results_common.pyc
	uncompyle6 -o .\_DECOMPILED\battle_results_event.py .\battle_results\event.pyc
	uncompyle6 -o .\_DECOMPILED\battle_results_frontline.py .\battle_results\frontline.pyc
	uncompyle6 -o .\_DECOMPILED\battle_results_random.py .\battle_results\random.pyc
	uncompyle6 -o .\_DECOMPILED\battle_results_ranked.py .\battle_results\ranked.pyc
	uncompyle6 -o .\_DECOMPILED\constants.py .\constants.pyc
	uncompyle6 -o .\_DECOMPILED\enumerations.py .\enumerations.pyc
	uncompyle6 -o .\_DECOMPILED\EXTRA\badges_common.py .\items\badges_common.pyc
	uncompyle6 -o .\_DECOMPILED\EXTRA\vehicles.py .\items\vehicles.pyc
	uncompyle6 -o .\_DECOMPILED\soft_exception.py .\soft_exception.pyc
	@echo done

STEP 3 - Copy decompiled files into source code

	Navigate to the folder named '_DECOMPILED' created in previous step.
	Copy all the files and the EXTRA-subfolders into the new version folder you just have created in this project

STEP 4 - Fix the main struct file: 'battle_results_common.py'

    The file 'battle_results_common.py' is the main file describing data structure, this has references to some libraries
	Compare this file with the same file from previous version, you will see in the top 20 lines or so some changes that needs to be done
	
	A) Comment out the reference to "items.vehicles", go to the EXTRA folder and find this file, copy the relevant classes into the file

	B) Comment out the reference to "items.badges_common", go to the EXTRA folder and find this file, copy the relevant classes into the file
	
STEP 5 - Fix the file used for unpacking data: 'DictPackers.py'

	Compare the file 'DictPackers.py' with the same file from the previous version and look for changes

	A) Comment out the reference to "debug_utils", this part is not needed

STEP 6 - Testing

	Make sure you play one battle using WoT, stay until battle is done and ensure you get the after battle stats displayed
	Do not close the WoT game client, closing or restarting game client might delete battle files

	Use Windows Explorer, and go to appdata folder by entering in the address bar: %appdata%

	Go to sufolders like this: ~\Wargaming.net\WorldOfTanks\battle_results

	You normally find one additional subfolder here, select it and the latest file, typically a filename like: 66324235210303662.dat
	Do not rename the file, the filename itself contains information that will be decrypted by the parser

	Save this file in this project under folder: battle_files + create subfolder for the WoT version currently in used

	Go to the file "launch.json" in root folder of this project, edit part of the content similar to this:

	"configurations": [
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "args":["./battle_files/WoT_1.10.1.3/66324235210303662.dat","-f","-l"],
        }
    ]

	It is the "args" section that needs to be investigated, tha path should point to the battle file you want to tested

	Make sure the parser file "wotbr2j.py" is selected in the Visual Studio Code editor
	
	Go to "Run" option in the navigation bar and press "Start Debugging"

	Check the terminal outpur for messages





